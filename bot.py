import logging
import pandas as pd
import csv
import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8449976484:AAEH_IPxs2JyPoPTyd2Gf3DOf8uPjnt-mCw"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    NAME, PROJECT_NAME, PROJECT_DESCRIPTION, PATENT,
    PHONE, EMAIL, SOCIAL_MEDIA, TEAM_MEMBERS,
    CITY, UNIVERSITY, FACULTY
) = range(11)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑—Ä–∏—Ç–µ–ª—è
VIEWER_NAME, VIEWER_PHONE = range(2)

# –¢–µ–∫—Å—Ç –æ –∫–æ–Ω–∫—É—Ä—Å–µ
COMPETITION_INFO = """
¬´–î–æ–Ω—Å–∫–∞—è —Å–±–æ—Ä–∫–∞¬ª - –∫—Ä—É–ø–Ω–µ–π—à–∏–π –Ω–∞ –Æ–≥–µ –†–æ—Å—Å–∏–∏ –µ–∂–µ–≥–æ–¥–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª–µ–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –∏ –∏–Ω–Ω–æ–≤–∞—Ç–æ—Ä–æ–≤ ‚öôÔ∏è

–ö–æ–Ω–∫—É—Ä—Å-—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–π –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ –±–∞–∑–µ –î–ì–¢–£ ‚Äî –æ–ø–æ—Ä–Ω–æ–≥–æ –≤—É–∑–∞ –†–æ—Å—Ç–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞ –≤ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ ¬´Gara–∂¬ª. –ï–∂–µ–≥–æ–¥–Ω–æ –î–æ–Ω—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –æ–±—â–µ—Å—Ç–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏—è–º–∏. 
–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏, –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ª–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
"""


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = [
        ["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ"],
        ["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üèÜ –ù–æ–º–∏–Ω–∞—Ü–∏–∏"],
        ["üëÄ –•–æ—á—É –±—ã—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–º!", "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞-—Å–º–æ—Ç—Ä–∞ ¬´–î–æ–Ω—Å–∫–∞—è —Å–±–æ—Ä–∫–∞¬ª - –∫—Ä—É–ø–Ω–µ–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª–µ–π –Ω–∞ –Æ–≥–µ –†–æ—Å—Å–∏–∏!

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""

    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ"
async def competition_info(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(COMPETITION_INFO)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–º–∏–Ω–∞—Ü–∏–∏"
async def nominations(update: Update, context: CallbackContext) -> None:
    nominations_text = """
üèÜ –ù–æ–º–∏–Ω–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ ¬´–î–æ–Ω—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ 2025¬ª:

‚Ä¢ ¬´–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –≥–æ–¥–∞¬ª
‚Ä¢ ¬´–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª 
‚Ä¢ ¬´–ê–≥—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –≥–æ–¥–∞¬ª
‚Ä¢ ¬´–Æ–Ω—ã–π –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å¬ª
‚Ä¢ ¬´–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏¬ª
‚Ä¢ ¬´–ë–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è¬ª
‚Ä¢ ¬´–ê–∫—Å–µ–ª–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è¬ª 
‚Ä¢ ¬´–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞¬ª (–Ω–æ–≤–∏–Ω–∫–∞ 2025 –≥–æ–¥–∞!)

+ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ ü§´

–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–π–¥–µ—Ç –≤ —Å–º–µ—à–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ—Ñ–ª–∞–π–Ω) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ 26 –Ω–æ—è–±—Ä—è ‚Äî —É—Å–ø–µ–π –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É! üî•
"""
    await update.message.reply_text(nominations_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
async def event_program(update: Update, context: CallbackContext) -> None:
    program_text = "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—â–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!"
    await update.message.reply_text(program_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
async def contacts(update: Update, context: CallbackContext) -> None:
    contacts_text = """
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:

–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8 (863) 238-17-22 –∏–ª–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ garazh@donstu.ru ‚Äî –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ ¬´Gara–∂¬ª.
"""
    await update.message.reply_text(contacts_text)


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
async def start_application(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "üìù –û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å ¬´–î–æ–Ω—Å–∫–∞—è —Å–±–æ—Ä–∫–∞¬ª!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û (–ø–æ–¥–∞—é—â–∏–π –∑–∞—è–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ø–∏–∫–µ—Ä):",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


# –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û
async def get_name(update: Update, context: CallbackContext) -> int:
    user_name = update.message.text
    context.user_data['name'] = user_name

    await update.message.reply_text(
        f"üë§ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
    )
    return PROJECT_NAME


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
async def get_project_name(update: Update, context: CallbackContext) -> int:
    project_name = update.message.text
    context.user_data['project_name'] = project_name

    await update.message.reply_text(
        f"üí° –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {project_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏):"
    )
    return PROJECT_DESCRIPTION


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
async def get_project_description(update: Update, context: CallbackContext) -> int:
    project_description = update.message.text
    context.user_data['project_description'] = project_description

    await update.message.reply_text(
        "üìã –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–∞—Ç–µ–Ω—Ç –Ω–∞ —ç—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É?\n\n"
        "–ù–∞–ø–∏—à–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç', –∞ –µ—Å–ª–∏ –µ—Å—Ç—å - —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –ø–∞—Ç–µ–Ω—Ç–∞:"
    )
    return PATENT


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ç–µ–Ω—Ç–µ
async def get_patent(update: Update, context: CallbackContext) -> int:
    patent_info = update.message.text
    context.user_data['patent'] = patent_info

    await update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
    )
    return PHONE


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: CallbackContext) -> int:
    phone = update.message.text
    context.user_data['phone'] = phone

    await update.message.reply_text(
        "üìß –£–∫–∞–∂–∏ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True)
    )
    return EMAIL


# –ü–æ–ª—É—á–µ–Ω–∏–µ email
async def get_email(update: Update, context: CallbackContext) -> int:
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        email = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        email = update.message.text
    context.user_data['email'] = email

    await update.message.reply_text(
        "üîó –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True)
    )
    return SOCIAL_MEDIA


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π
async def get_social_media(update: Update, context: CallbackContext) -> int:
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        social_media = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        social_media = update.message.text
    context.user_data['social_media'] = social_media

    await update.message.reply_text(
        "üë• –£–∫–∞–∂–∏ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å –æ–¥–∏–Ω - –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):",
        reply_markup=ReplyKeyboardRemove()
    )
    return TEAM_MEMBERS


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
async def get_team_members(update: Update, context: CallbackContext) -> int:
    team_members = update.message.text
    context.user_data['team_members'] = team_members

    await update.message.reply_text(
        "üèôÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:"
    )
    return CITY


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
async def get_city(update: Update, context: CallbackContext) -> int:
    city = update.message.text
    context.user_data['city'] = city

    await update.message.reply_text(
        "üéì –£–∫–∞–∂–∏ —Å–≤–æ—ë —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ - –í–£–ó (–µ—Å–ª–∏ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç):",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True)
    )
    return UNIVERSITY


# –ü–æ–ª—É—á–µ–Ω–∏–µ –í–£–ó–∞
async def get_university(update: Update, context: CallbackContext) -> int:
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        university = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        university = update.message.text
    context.user_data['university'] = university

    await update.message.reply_text(
        "üìö –£–∫–∞–∂–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–µ—Å–ª–∏ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç):",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True)
    )
    return FACULTY


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def get_faculty(update: Update, context: CallbackContext) -> int:
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        faculty = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        faculty = update.message.text
    context.user_data['faculty'] = faculty

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    success = await save_application(update, context)

    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        summary_text = f"""
‚úÖ –ó–ê–Ø–í–ö–ê –ü–û–î–ê–ù–ê –£–°–ü–ï–®–ù–û!

üìã –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ üë§ –§–ò–û (—Å–ø–∏–∫–µ—Ä): {context.user_data['name']}
‚Ä¢ üí° –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {context.user_data['project_name']}
‚Ä¢ üìù –û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['project_description']}
‚Ä¢ üìÑ –ü–∞—Ç–µ–Ω—Ç: {context.user_data['patent']}
‚Ä¢ üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}
‚Ä¢ üìß Email: {context.user_data['email']}
‚Ä¢ üîó –°–æ—Ü—Å–µ—Ç–∏: {context.user_data['social_media']}
‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–∞: {context.user_data['team_members']}
‚Ä¢ üèôÔ∏è –ì–æ—Ä–æ–¥: {context.user_data['city']}
‚Ä¢ üéì –í–£–ó: {context.user_data['university']}
‚Ä¢ üìö –§–∞–∫—É–ª—å—Ç–µ—Ç: {context.user_data['faculty']}

üìû –° —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —É—á–∞—Å—Ç–∏—è.

üèÜ –£–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!
        """
    else:
        summary_text = """
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.

–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è.

–ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.
        """

    await update.message.reply_text(
        summary_text,
        reply_markup=get_main_keyboard()
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    return ConversationHandler.END


# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑—Ä–∏—Ç–µ–ª—è
async def start_viewer_registration(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "üëÄ –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑—Ä–∏—Ç–µ–ª—è, —É–∫–∞–∂–∏ —Å–≤–æ—ë –§–ò–û:",
        reply_markup=ReplyKeyboardRemove()
    )
    return VIEWER_NAME


# –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û –∑—Ä–∏—Ç–µ–ª—è
async def get_viewer_name(update: Update, context: CallbackContext) -> int:
    viewer_name = update.message.text
    context.user_data['viewer_name'] = viewer_name

    await update.message.reply_text(
        f"üë§ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {viewer_name}!\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
    )
    return VIEWER_PHONE


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑—Ä–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def get_viewer_phone(update: Update, context: CallbackContext) -> int:
    viewer_phone = update.message.text
    context.user_data['viewer_phone'] = viewer_phone

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –∑—Ä–∏—Ç–µ–ª—è
    success = await save_viewer_application(update, context)

    if success:
        summary_text = f"""
‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–†–ò–¢–ï–õ–Ø –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!

üìã –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ üë§ –§–ò–û: {context.user_data['viewer_name']}
‚Ä¢ üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['viewer_phone']}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –ø–µ—Ä–µ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!

‚ú® –ñ–¥–µ–º —Ç–µ–±—è –Ω–∞ ¬´–î–æ–Ω—Å–∫–æ–π —Å–±–æ—Ä–∫–µ 2025¬ª!
        """
    else:
        summary_text = """
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

–ü–æ–ø—Ä–æ–±—É–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.
        """

    await update.message.reply_text(
        summary_text,
        reply_markup=get_main_keyboard()
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    return ConversationHandler.END


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Excel –∏ CSV
async def save_application(update: Update, context: CallbackContext) -> bool:
    try:
        # –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        application_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'type': '–£–ß–ê–°–¢–ù–ò–ö',
            'user_id': update.effective_user.id,
            'username': update.effective_user.username or '–ù–µ—Ç username',
            'name': context.user_data['name'],
            'project_name': context.user_data['project_name'],
            'project_description': context.user_data['project_description'],
            'patent': context.user_data['patent'],
            'phone': context.user_data['phone'],
            'email': context.user_data['email'],
            'social_media': context.user_data['social_media'],
            'team_members': context.user_data['team_members'],
            'city': context.user_data['city'],
            'university': context.user_data['university'],
            'faculty': context.user_data['faculty']
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        csv_success = save_to_csv(application_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        excel_success = save_to_excel(application_data)

        if csv_success or excel_success:
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {application_data['name']} - {application_data['project_name']}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑—Ä–∏—Ç–µ–ª—è
async def save_viewer_application(update: Update, context: CallbackContext) -> bool:
    try:
        # –î–∞–Ω–Ω—ã–µ –∑—Ä–∏—Ç–µ–ª—è
        viewer_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'type': '–ó–†–ò–¢–ï–õ–¨',
            'user_id': update.effective_user.id,
            'username': update.effective_user.username or '–ù–µ—Ç username',
            'name': context.user_data['viewer_name'],
            'phone': context.user_data['viewer_phone']
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        csv_success = save_to_csv(viewer_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        excel_success = save_to_excel(viewer_data)

        if csv_success or excel_success:
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑—Ä–∏—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {viewer_data['name']}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∑—Ä–∏—Ç–µ–ª—è –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∑—Ä–∏—Ç–µ–ª—è: {e}")
        return False


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
def save_to_csv(application_data):
    try:
        file_exists = os.path.exists('applications.csv')

        with open('applications.csv', 'a', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=application_data.keys())
            if not file_exists:
                writer.writeheader()
            writer.writerow(application_data)

        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CSV: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ backup CSV
        try:
            backup_filename = f"backup_applications_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            with open(backup_filename, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=application_data.keys())
                writer.writeheader()
                writer.writerow(application_data)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω backup CSV: {backup_filename}")
            return True
        except Exception as backup_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup CSV: {backup_error}")
            return False


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
def save_to_excel(application_data):
    try:
        # –°–æ–∑–¥–∞—ë–º DataFrame –∏–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        new_df = pd.DataFrame([application_data])

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        max_retries = 2
        for attempt in range(max_retries):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if os.path.exists('applications.xlsx'):
                    existing_df = pd.read_excel('applications.xlsx')
                    updated_df = pd.concat([existing_df, new_df], ignore_index=True)
                else:
                    updated_df = new_df

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                updated_df.to_excel('applications.xlsx', index=False)
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel")
                return True

            except PermissionError:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è Excel —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 2}...")
                    # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    import time
                    time.sleep(1)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel (—Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω), –Ω–æ CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                    return False  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ CSV —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")
                return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Excel: {e}")
        return False


# –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
async def cancel_application(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑—Ä–∏—Ç–µ–ª—è
async def cancel_viewer_registration(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑—Ä–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text

    if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ":
        await competition_info(update, context)
    elif text == "üèÜ –ù–æ–º–∏–Ω–∞—Ü–∏–∏":
        await nominations(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await contacts(update, context)
    elif text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        await start_application(update, context)
    elif text == "üëÄ –•–æ—á—É –±—ã—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–º!":
        await start_viewer_registration(update, context)
    elif text == "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await event_program(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üì±",
            reply_markup=get_main_keyboard()
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –∑–∞—è–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$"), start_application)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_project_name)],
            PROJECT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_project_description)],
            PATENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_patent)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            SOCIAL_MEDIA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_social_media)],
            TEAM_MEMBERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_team_members)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            UNIVERSITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_university)],
            FACULTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_faculty)],
        },
        fallbacks=[CommandHandler("cancel", cancel_application)]
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑—Ä–∏—Ç–µ–ª—è
    viewer_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üëÄ –•–æ—á—É –±—ã—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–º!$"), start_viewer_registration)],
        states={
            VIEWER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_viewer_name)],
            VIEWER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_viewer_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel_viewer_registration)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(participant_conv_handler)
    application.add_handler(viewer_conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º Ctrl+C")
    print("üìä –ó–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ applications.csv –∏ applications.xlsx")
    print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ bot.log")
    application.run_polling()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")